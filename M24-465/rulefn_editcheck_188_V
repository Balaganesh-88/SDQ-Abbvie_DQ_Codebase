"""
Rule Name: rulefn_editcheck_188_V
Domains: mh_v_df,dm_v_df
"""

def rulefn_editcheck_188_V(query_text, mh_v_df,dm_v_df):
    prim_df = MH_V.copy()
    rel_df = DM_V.copy()
    payload_records = []
    if prim_df.shape[0] > 0 and rel_df.shape[0] > 0:
        args_dict = {
        'p_form_ls': ['MH_F'],
        'p_visit_ls': [],
        's_form_ls': [],
        's_visit_ls': [],
        'p_var': 'MHSTDTC',
        's_var': 'RFICDTC',
        'not_eql_op': '!=',
        'cmp_opr': '<',
    }
        p_form_ls = args_dict['p_form_ls']
        p_visit_ls = args_dict['p_visit_ls']
        r_form_ls = args_dict['s_form_ls']
        r_visit_ls = args_dict['s_visit_ls']
        p_var,s_var, not_eql_op, cmp_opr = args_dict['p_var'], args_dict['s_var'],args_dict['not_eql_op'], args_dict['cmp_opr']  
        prim_df = udf_glbl_filter_by_formid_visitid(prim_df, p_form_ls, p_visit_ls)
        rel_df = udf_glbl_filter_by_formid_visitid(rel_df, r_form_ls, r_visit_ls)
        p_flag, prim_df = udf_glbl_null_check(prim_df, p_var, not_eql_op)
        r_flag, rel_df = udf_glbl_null_check(rel_df, s_var, not_eql_op)
        if (p_flag and len(prim_df) > 0) and (r_flag and len(rel_df) > 0):
            prim_df['p_dsstdtc'] = prim_df[p_var].apply(udf_glbl_get_date)
            rel_df['s_rficdtc'] = rel_df[s_var].apply(udf_glbl_get_date)
            prim_df = prim_df.dropna(subset=['p_dsstdtc'])
            rel_df = rel_df.dropna(subset=['s_rficdtc'])
            if len(prim_df) > 0 and len(rel_df) > 0:  
                for prim_ind in range(prim_df.shape[0]):
                    prim_rec = prim_df.iloc[[prim_ind]]
                    r_flag, rel_df = udf_glbl_comparison_check(rel_df, 's_rficdtc', prim_rec['p_dsstdtc'].values[0], cmp_opr)
                    flag = False
                    if r_flag and len(rel_df) > 0:
                        flag = True
                    if flag:
                        for rel_ind in range(rel_df.shape[0]):
                            rel_rec = rel_df.iloc[[rel_ind]]
                            query_text = udf_glbl_update_querytext(query_text)
                            payload = {
                                        "query_text": query_text,
                                        # Update the query text here
                                        "form_index": str(prim_rec['form_index'].values[0]),
                                        "modif_dts": str(pd.to_datetime(prim_rec['modif_dts'].values[0])),
                                        "stg_ck_event_id": int(prim_rec['ck_event_id']),
                                        "relational_ck_event_ids": [int(rel_rec['ck_event_id'].values[0])],
                                        "confid_score": 1,
                                        }
                            payload_records.append(payload)

    return payload_records
